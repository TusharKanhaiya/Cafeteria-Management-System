/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package caffe;

import com.mysql.jdbc.Connection;
import java.sql.Date;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.Statement;
import java.text.SimpleDateFormat;
import javax.swing.JOptionPane;

/**
 *
 * @author HP
 */
public class addStaff extends javax.swing.JFrame {

    /**
     * Creates new form addStaff
     */
    public addStaff() {
        initComponents(); 
        dol_l.setVisible(false);
        dol.setVisible(false);
        status.setVisible(false);
        status_l.setVisible(false);
        id.setEditable(false);
        this.setBounds(495, 270, 990, 540);
        Connection con = getConnection();
        if(con!= null)
        {
           createTable(con);
           setTypeAndId(con);
           try
           {
               con.close();
           }
           catch(Exception e)
           {
               System.out.println(e);
           }
        }
        else
        {
            System.out.println("connection doesnt established ");
        }
    }

    addStaff(String ID) {
         //To change body of generated methods, choose Tools | Templates.
         initComponents();
         this.setBounds(495, 270, 990, 540);
         add.setText("Update");
         id.setEditable(false);
         id.setText(ID);
         setUpdatePara();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        id = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        name = new javax.swing.JTextField();
        status_l = new javax.swing.JLabel();
        pn = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        doj = new com.toedter.calendar.JDateChooser();
        jLabel5 = new javax.swing.JLabel();
        type = new javax.swing.JComboBox<>();
        jLabel6 = new javax.swing.JLabel();
        salary = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        suid = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        spass = new javax.swing.JPasswordField();
        add = new javax.swing.JButton();
        back = new javax.swing.JButton();
        jLabel9 = new javax.swing.JLabel();
        status = new javax.swing.JComboBox<>();
        dol_l = new javax.swing.JLabel();
        dol = new com.toedter.calendar.JDateChooser();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Malgun Gothic", 1, 20)); // NOI18N
        jLabel1.setText("ID");

        id.setFont(new java.awt.Font("Malgun Gothic", 0, 18)); // NOI18N

        jLabel2.setFont(new java.awt.Font("Malgun Gothic", 1, 20)); // NOI18N
        jLabel2.setText("Type");

        name.setFont(new java.awt.Font("Malgun Gothic", 0, 18)); // NOI18N

        status_l.setFont(new java.awt.Font("Malgun Gothic", 1, 20)); // NOI18N
        status_l.setText("Status");

        pn.setFont(new java.awt.Font("Malgun Gothic", 0, 18)); // NOI18N

        jLabel4.setFont(new java.awt.Font("Malgun Gothic", 1, 20)); // NOI18N
        jLabel4.setText("Date of joining");

        jLabel5.setFont(new java.awt.Font("Malgun Gothic", 1, 20)); // NOI18N
        jLabel5.setText("Name");

        type.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Billing Staff", "Kitchen Staff", "Cleaning Staff", "Serving"
            + " Staff" }));

jLabel6.setFont(new java.awt.Font("Malgun Gothic", 1, 20)); // NOI18N
jLabel6.setText("Salary");

salary.setFont(new java.awt.Font("Malgun Gothic", 0, 18)); // NOI18N

jLabel7.setFont(new java.awt.Font("Malgun Gothic", 1, 20)); // NOI18N
jLabel7.setText("User ID");

suid.setFont(new java.awt.Font("Malgun Gothic", 0, 18)); // NOI18N

jLabel8.setFont(new java.awt.Font("Malgun Gothic", 1, 20)); // NOI18N
jLabel8.setText("Password");

spass.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N

add.setFont(new java.awt.Font("Malgun Gothic", 1, 24)); // NOI18N
add.setText("ADD");
add.addActionListener(new java.awt.event.ActionListener() {
    public void actionPerformed(java.awt.event.ActionEvent evt) {
        addActionPerformed(evt);
    }
    });

    back.setFont(new java.awt.Font("Malgun Gothic", 1, 24)); // NOI18N
    back.setText("<-  Back");
    back.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            backActionPerformed(evt);
        }
    });

    jLabel9.setFont(new java.awt.Font("Malgun Gothic", 1, 20)); // NOI18N
    jLabel9.setText("Phone no.");

    status.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Working","Not Working" }));
    status.addItemListener(new java.awt.event.ItemListener() {
        public void itemStateChanged(java.awt.event.ItemEvent evt) {
            statusItemStateChanged(evt);
        }
    });

    dol_l.setFont(new java.awt.Font("Malgun Gothic", 1, 20)); // NOI18N
    dol_l.setText("Date of leaving");

    javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
    getContentPane().setLayout(layout);
    layout.setHorizontalGroup(
        layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(layout.createSequentialGroup()
            .addGap(172, 172, 172)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(jLabel5)
                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(jLabel6)
                .addComponent(jLabel7)
                .addComponent(jLabel4)
                .addComponent(jLabel8)
                .addComponent(back)
                .addComponent(jLabel9))
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 116, Short.MAX_VALUE)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(add, javax.swing.GroupLayout.PREFERRED_SIZE, 119, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(type, javax.swing.GroupLayout.PREFERRED_SIZE, 119, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(salary, javax.swing.GroupLayout.PREFERRED_SIZE, 119, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(suid, javax.swing.GroupLayout.PREFERRED_SIZE, 133, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(spass, javax.swing.GroupLayout.PREFERRED_SIZE, 194, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addContainerGap(365, Short.MAX_VALUE))
                .addGroup(layout.createSequentialGroup()
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(pn, javax.swing.GroupLayout.DEFAULT_SIZE, 146, Short.MAX_VALUE)
                        .addComponent(id, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(name)
                        .addComponent(doj, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGap(105, 105, 105)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(dol_l, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(status_l, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGap(28, 28, 28)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(status, javax.swing.GroupLayout.PREFERRED_SIZE, 119, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(0, 15, Short.MAX_VALUE))
                        .addComponent(dol, javax.swing.GroupLayout.DEFAULT_SIZE, 134, Short.MAX_VALUE)))))
    );
    layout.setVerticalGroup(
        layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(layout.createSequentialGroup()
            .addContainerGap()
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(jLabel1)
                .addComponent(id, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGap(18, 18, 18)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(name, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(jLabel5))
            .addGap(18, 18, 18)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(status_l)
                    .addComponent(pn, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(status, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addComponent(jLabel9, javax.swing.GroupLayout.Alignment.TRAILING))
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(doj, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(dol_l, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(dol, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)))
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(type, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGap(18, 18, 18)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(jLabel6)
                .addComponent(salary, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGap(28, 28, 28)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(suid, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(jLabel7))
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(jLabel8)
                .addGroup(layout.createSequentialGroup()
                    .addComponent(spass)
                    .addGap(1, 1, 1)))
            .addGap(46, 46, 46)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(add, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(back, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGap(85, 85, 85))
    );

    pack();
    }// </editor-fold>//GEN-END:initComponents

    private void addActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addActionPerformed
        // TODO add your handling code here:
        Connection con = getConnection();
        if(con!= null)
        {
           insertTable(con);
           if(add.getText().equals("ADD"))
                setTypeAndId(con);
           try
           {
               con.close();
           }
           catch(Exception e)
           {
               System.out.println(e);
           }
           if(add.getText().equals("Update"))
           {
               updateStaff us = new updateStaff();
               us.setVisible(true);
               this.dispose();
           }
           
        }
        else
        {
            System.out.println("connection doesnt established ");
            JOptionPane.showMessageDialog(this,"connection is not established");
        }
    }//GEN-LAST:event_addActionPerformed

    private void backActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backActionPerformed
        // TODO add your handling code here:
        if(add.getText().equals("ADD"))
        {
            master_staff ms = new master_staff();
            ms.setVisible(true);
            this.dispose();
        }
        else
        {
            updateStaff us = new updateStaff();
            us.setVisible(true);
            this.dispose();
        }
    }//GEN-LAST:event_backActionPerformed

    private void statusItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_statusItemStateChanged
        // TODO add your handling code here:
        String c_status = status.getSelectedItem().toString();
        if(c_status.equals("Working"))
        {
            dol.setVisible(false);
            dol_l.setVisible(false);
        }
        else
        {
            dol.setVisible(true);
            dol_l.setVisible(true);
        }
    }//GEN-LAST:event_statusItemStateChanged

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(addStaff.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(addStaff.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(addStaff.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(addStaff.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new addStaff().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton add;
    private javax.swing.JButton back;
    private com.toedter.calendar.JDateChooser doj;
    private com.toedter.calendar.JDateChooser dol;
    private javax.swing.JLabel dol_l;
    private javax.swing.JTextField id;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JTextField name;
    private javax.swing.JTextField pn;
    private javax.swing.JTextField salary;
    private javax.swing.JPasswordField spass;
    private javax.swing.JComboBox<String> status;
    private javax.swing.JLabel status_l;
    private javax.swing.JTextField suid;
    private javax.swing.JComboBox<String> type;
    // End of variables declaration//GEN-END:variables

    private Connection getConnection() {
         //To change body of generated methods, choose Tools | Templates.
         try
         {
             Class.forName("com.mysql.jdbc.Driver");
             Connection con =(Connection) DriverManager.getConnection("jdbc:mysql://localhost:3306/cafe","root","");
             return con;
         }
         catch(Exception e)
         {
             System.out.println("connection failed"+e);
             Connection con = null;
             return con;
         }
    }

    private void createTable(Connection con) {
        try
        {
                    PreparedStatement  create  = con.prepareStatement("CREATE TABLE STAFF(staffID int primary key auto_increment , name varchar(30) not null check(name!=''), phone_no varchar(10) not null unique , joining_date date not null, type varchar(20) not null , salary int not null check(salary>0) , s_userid varchar(30) not null unique, s_pass varchar(30) not null , leaving_date date , status varchar(15) )");
                    create.executeUpdate();
                    //Statement s=con.createStatement();
                    //ResultSet rs=s.executeQuery("insert into staff (staffid,Name,phone_no,joining_date,type,salary,s_userid,s_pass,status) value(1,'tushar',1234568970,'2020-10-21','Master',100000,'tgak47','tushargoyalak47','Working')");
                    create  = con.prepareStatement("insert into staff (staffid,Name,phone_no,joining_date,type,salary,s_userid,s_pass,status) value(1,'tushar',1234568970,'2020-10-21','Master',100000,'tgak47','tushargoyalak47','Working')");
                    create.execute();
                    System.out.println("table created");
        }
        catch(Exception e)
        {
           //JOptionPane.showMessageDialog(this,"error in creating table!");
           System.out.println(e);
        }
    }

    private void setTypeAndId(Connection con) {
       try
       {
           Statement s=con.createStatement();
           ResultSet rs=s.executeQuery("Select staffID from staff order by staffID asc");
            if(rs.last())
            {
                int id_no = rs.getInt(1);
                id_no = id_no + 1;
                id.setText(String.valueOf(id_no));  
            }
            else
                id.setText("1");
            //System.out.println(rs.last() + "  " + rs.getInt(1));
            name.setText("");
            pn.setText("");
            salary.setText("");
            suid.setText("");
            spass.setText("");
            
       }
       catch(Exception e)
       {
           System.out.println(e);
           JOptionPane.showMessageDialog(this,"couldn't setID!");
       }
       
    }

    private void insertTable(Connection con) {
        try
        {
            String query = null;
            if(add.getText().equals("ADD"))
               query = "insert into staff (Name,phone_no,joining_date,type,salary,s_userid,s_pass,status) value(?,?,?,?,?,?,?,?)" ;
            else
                query = "update staff set Name = ? , phone_no = ? , joining_date = ? , type = ? , salary = ? , s_userid = ? , s_pass = ? , status = ? , leaving_date = ? where staffID ="+id.getText() ;
                
            PreparedStatement st = con.prepareStatement(query);
            st.setString(1,name.getText());
            String regex = "[1-9]\\d\\d\\d\\d\\d\\d\\d\\d\\d";
            if(!pn.getText().matches(regex))
                throw new Exception ("Incorrect Mobile no.!");
            st.setString(2,pn.getText());
            SimpleDateFormat sdf1 = new SimpleDateFormat("yyyy-MM-dd");
            st.setString(3, sdf1.format(doj.getDate()));
            st.setString(4, (String) type.getSelectedItem());
            st.setInt(5, Integer.parseInt(salary.getText()));
            st.setString(6, suid.getText());
            st.setString(7, String.valueOf(spass.getPassword()));
            if(add.getText().equals("ADD"))
                st.setString(8,"Working");
            else
                st.setString(8,status.getSelectedItem().toString());
            if(status.getSelectedItem().toString().equals("Not Working"))
            {
                java.util.Date d1 = sdf1.parse(sdf1.format(doj.getDate()));
                java.util.Date d2 = sdf1.parse(sdf1.format(dol.getDate()));
                if(d1.compareTo(d2)<0)
                    st.setString(9, sdf1.format(dol.getDate()));
                else
                    throw new Exception ("Date of leaving is not correct");
            }
            if(status.getSelectedItem().toString().equals("Working") && add.getText().equals("Update"))
                st.setString(9, null);
            st.execute();
            if(add.getText().equals("ADD"))
                JOptionPane.showMessageDialog(this,"Staff record inserted SUCCESSFULLY!");
            else
            {
                JOptionPane.showMessageDialog(this,"Staff record updated SUCCESSFULLY!");
            }
        }
        catch(Exception e)
        {
            System.out.println(e);
            JOptionPane.showMessageDialog(this,"inserted duplicate/wrong enteries please TRY AGAIN!");
        }
    }

    private void setUpdatePara() {
         //To change body of generated methods, choose Tools | Templates.
         Connection con = getConnection();
         try
         {
             if(con!=null)
             {
                 Statement s=con.createStatement();
                 //System.out.print("h1");
                 ResultSet rs=s.executeQuery("Select * from staff where staffID ="+id.getText());
                 rs.next();
                 name.setText(rs.getString(2));
                 pn.setText(rs.getString(3));
                 doj.setDate(rs.getDate(4));
                 type.setSelectedItem(String.valueOf(rs.getString(5)));
                 salary.setText(String.valueOf(rs.getInt(6)));
                 suid.setText(rs.getString(7));
                 spass.setText(rs.getString(8));
                 status.setSelectedItem(String.valueOf(rs.getString(10)));
                 if(status.getSelectedItem().toString().equals("Not Working"))
                     dol.setDate(rs.getDate(9));
                 else
                 {
                     dol.setVisible(false);
                     dol_l.setVisible(false);
                 }
                 con.close();
             }
         }
         catch(Exception e)
         {
             System.out.println("update  "+e);
         }
    }
}
