/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package caffe;

import com.mysql.jdbc.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.Statement;
import javax.swing.JOptionPane;
import javax.swing.table.TableModel;
import org.jdesktop.swingx.autocomplete.AutoCompleteDecorator;

/**
 *
 * @author HP
 */



public class updateProduct extends javax.swing.JFrame {

    /**
     * Creates new form updateProduct
     */
    int i=0;
    
    public updateProduct() {
        initComponents();
        this.setBounds(495, 270, 990, 540);
        AutoCompleteDecorator.decorate(name);
        setName();
        viewc.setSelectedItem("View All");
        view.doClick();
    }

    updateProduct(int j) {
         //To change body of generated methods, choose Tools | Templates.
         initComponents();
        this.setBounds(495, 270, 990, 540);
        AutoCompleteDecorator.decorate(name);
        setName();
        viewc.setSelectedItem("View All");
        view.doClick();
        update.setVisible(false);
        i=j;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        table = new javax.swing.JTable();
        view = new javax.swing.JButton();
        viewc = new javax.swing.JComboBox<>();
        name_l = new javax.swing.JLabel();
        cat = new javax.swing.JComboBox<>();
        cat_l = new javax.swing.JLabel();
        name = new javax.swing.JComboBox<>();
        type_l = new javax.swing.JLabel();
        type = new javax.swing.JComboBox<>();
        avail_l = new javax.swing.JLabel();
        avail = new javax.swing.JComboBox<>();
        back = new javax.swing.JButton();
        update = new javax.swing.JButton();
        del = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(null);

        table.setFont(new java.awt.Font("Malgun Gothic", 3, 16)); // NOI18N
        table.setForeground(new java.awt.Color(255, 51, 51));
        table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null}
            },
            new String [] {
                "ID", "Name", "Type", "Category", "Price", "Availability"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        table.setRowHeight(30);
        jScrollPane1.setViewportView(table);

        getContentPane().add(jScrollPane1);
        jScrollPane1.setBounds(0, 110, 966, 313);

        view.setFont(new java.awt.Font("Malgun Gothic", 1, 22)); // NOI18N
        view.setText("View");
        view.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewActionPerformed(evt);
            }
        });
        getContentPane().add(view);
        view.setBounds(870, 50, 92, 39);

        viewc.setFont(new java.awt.Font("Malgun Gothic", 0, 18)); // NOI18N
        viewc.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "View by others","View by name","View All" }));
        viewc.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                viewcItemStateChanged(evt);
            }
        });
        getContentPane().add(viewc);
        viewc.setBounds(12, 13, 140, 31);

        name_l.setFont(new java.awt.Font("Malgun Gothic", 1, 22)); // NOI18N
        name_l.setText("Name");
        getContentPane().add(name_l);
        name_l.setBounds(360, 51, 102, 39);

        cat.setFont(new java.awt.Font("Malgun Gothic", 0, 18)); // NOI18N
        cat.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] {"--None--","Breads & Noodles","Pizza & Burgers","Dessert","Drinks" }));
        getContentPane().add(cat);
        cat.setBounds(370, 50, 170, 39);

        cat_l.setFont(new java.awt.Font("Malgun Gothic", 1, 22)); // NOI18N
        cat_l.setText("Category");
        getContentPane().add(cat_l);
        cat_l.setBounds(250, 50, 110, 39);

        name.setFont(new java.awt.Font("Malgun Gothic", 0, 18)); // NOI18N
        name.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { }));
        getContentPane().add(name);
        name.setBounds(474, 55, 177, 39);

        type_l.setFont(new java.awt.Font("Malgun Gothic", 1, 22)); // NOI18N
        type_l.setText("Type");
        getContentPane().add(type_l);
        type_l.setBounds(10, 50, 60, 39);

        type.setFont(new java.awt.Font("Malgun Gothic", 0, 18)); // NOI18N
        type.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] {"--None--","Veg","Non Veg" }));
        getContentPane().add(type);
        type.setBounds(80, 50, 113, 39);

        avail_l.setFont(new java.awt.Font("Malgun Gothic", 1, 22)); // NOI18N
        avail_l.setText("Availability");
        getContentPane().add(avail_l);
        avail_l.setBounds(590, 50, 120, 39);

        avail.setFont(new java.awt.Font("Malgun Gothic", 0, 18)); // NOI18N
        avail.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] {"--None--","Available","Not Available"}));
        getContentPane().add(avail);
        avail.setBounds(730, 50, 120, 39);

        back.setFont(new java.awt.Font("Malgun Gothic", 1, 24)); // NOI18N
        back.setText("<- Back");
        back.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backActionPerformed(evt);
            }
        });
        getContentPane().add(back);
        back.setBounds(50, 440, 130, 40);

        update.setFont(new java.awt.Font("Malgun Gothic", 1, 24)); // NOI18N
        update.setText("Update");
        update.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateActionPerformed(evt);
            }
        });
        getContentPane().add(update);
        update.setBounds(360, 440, 130, 40);

        del.setFont(new java.awt.Font("Malgun Gothic", 1, 24)); // NOI18N
        del.setText("Delete");
        del.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                delActionPerformed(evt);
            }
        });
        getContentPane().add(del);
        del.setBounds(740, 440, 110, 40);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void viewcItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_viewcItemStateChanged
        // TODO add your handling code here:
        if(viewc.getSelectedItem().toString().equals("View by name"))
        {
            name_l.setVisible(true);
            name.setVisible(true);
            type_l.setVisible(false);
            type.setVisible(false);
            cat_l.setVisible(false);
            cat.setVisible(false);
            avail_l.setVisible(false);
            avail.setVisible(false);
        }
        else
        {
            if(viewc.getSelectedItem().toString().equals("View by others"))
            {
                name_l.setVisible(false);
                name.setVisible(false);
                type_l.setVisible(true);
                type.setVisible(true);
                cat_l.setVisible(true);
                cat.setVisible(true);
                avail_l.setVisible(true);
                avail.setVisible(true);
            }
            else
            {
                name_l.setVisible(false);
                name.setVisible(false);
                type_l.setVisible(false);
                type.setVisible(false);
                cat_l.setVisible(false);
                cat.setVisible(false);
                avail_l.setVisible(false);
                avail.setVisible(false);
            }
        }
    }//GEN-LAST:event_viewcItemStateChanged

    private void viewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewActionPerformed
        // TODO add your handling code here:
        String query = setQuery();
        Connection con = getConnection();
        if(con!=null)
        {
            try
            {
                Statement s=con.createStatement();
                ResultSet rs=s.executeQuery(query);
                mymodel mm = new mymodel(rs);
                table.setModel(mm);
            }
            catch(Exception e)
            {
                System.out.println(e);
            }
        }
    }//GEN-LAST:event_viewActionPerformed

    private void updateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateActionPerformed
        // TODO add your handling code here:
        try
        {
            TableModel model = (TableModel) table.getModel();
            int row = table.getSelectedRow();

            String ID = model.getValueAt(row, 0).toString();
            
            addProduct ap = new addProduct(ID);
            ap.setVisible(true);
            this.dispose();
            
        }
        catch (Exception e)
        {
            JOptionPane.showMessageDialog(this,"Please select Product details from Table");
        }
    }//GEN-LAST:event_updateActionPerformed

    private void backActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backActionPerformed
        // TODO add your handling code here:
        if(i==0)
        {
            products pr = new products();
            pr.setVisible(true);
            this.dispose();
        }
        else
        {
            products pr = new products(i);
            pr.setVisible(true);
            this.dispose();
        }
    }//GEN-LAST:event_backActionPerformed

    private void delActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_delActionPerformed
        // TODO add your handling code here:
        try
        {
            TableModel model = (TableModel) table.getModel();
            int row = table.getSelectedRow();

            String pid = model.getValueAt(row, 0).toString();
            int resp = JOptionPane.showConfirmDialog(this, "Do you want to DELETE this PRODUCT","Confirm", JOptionPane.YES_NO_OPTION, JOptionPane.WARNING_MESSAGE);
            if(resp == JOptionPane.YES_OPTION)
            {
                deleteProduct(pid);
                view.doClick();
            }

        }
        catch (Exception e)
        {
            JOptionPane.showMessageDialog(this,"Please select Order details from Table");
        }
    }//GEN-LAST:event_delActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(updateProduct.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(updateProduct.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(updateProduct.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(updateProduct.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new updateProduct().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> avail;
    private javax.swing.JLabel avail_l;
    private javax.swing.JButton back;
    private javax.swing.JComboBox<String> cat;
    private javax.swing.JLabel cat_l;
    private javax.swing.JButton del;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JComboBox<String> name;
    private javax.swing.JLabel name_l;
    private javax.swing.JTable table;
    private javax.swing.JComboBox<String> type;
    private javax.swing.JLabel type_l;
    private javax.swing.JButton update;
    private javax.swing.JButton view;
    private javax.swing.JComboBox<String> viewc;
    // End of variables declaration//GEN-END:variables

    private void setName() {
         //To change body of generated methods, choose Tools | Templates.
         Connection con = getConnection();
         try
         {
             Statement s=con.createStatement();
             ResultSet rs=s.executeQuery("select name from products order by name asc");
             name.addItem("");
             while(rs.next())
                 name.addItem(rs.getString(1));
             con.close();
         }
         catch(Exception e)
         {
             System.out.println(e);
         }
         
    }

    private Connection getConnection() {
         //To change body of generated methods, choose Tools | Templates.
         try
         {
             Class.forName("com.mysql.jdbc.Driver");
             Connection con =(Connection) DriverManager.getConnection("jdbc:mysql://localhost:3306/cafe","root","");
             return con;
         }
         catch(Exception e)
         {
             System.out.println("connection failed"+e);
             Connection con = null;
             return con;
         }
    }

    private String setQuery() {
        //To change body of generated methods, choose Tools | Templates.
        String query = null;
        if(viewc.getSelectedItem().toString().equals("View by name"))
        {
            String names = name.getSelectedItem().toString();
            query = "select * from products where name = '"+names+"'";
            //System.out.println(query);
            return query;
        }
        else
        {
            if(viewc.getSelectedItem().toString().equals("View All"))
            {
                query = "select * from products order by productID asc";
                //System.out.println(query);
                return query;
            }
            else
            {
                String types = type.getSelectedItem().toString();
                String cats = cat.getSelectedItem().toString();
                String avails = avail.getSelectedItem().toString();
                if(types.equals("--None--") && cats.equals("--None") && avails.equals("--None--"))
                    query = "select * from products where type = ''";
                if(types.equals("--None--") == false && cats.equals("--None") == false && avails.equals("--None--") == false)
                    query = "select * from products where type = '"+types+"' and category = '"+cats+"' and availability = '"+avails+"' ";
                if(types.equals("--None--") == false && cats.equals("--None--")  && avails.equals("--None--") )
                    query = "select * from products where type = '"+types+"' ";
                if(types.equals("--None--") && cats.equals("--None--") == false && avails.equals("--None--") )
                    query = "select * from products where category = '"+cats+"' ";
                if(types.equals("--None--") && cats.equals("--None--") && avails.equals("--None--") == false)
                    query = "select * from products where availability = '"+avails+"' ";
                if(types.equals("--None--") == false && cats.equals("--None--") == false && avails.equals("--None--"))
                    query = "select * from products where type = '"+types+"' and category = '"+cats+"' ";
                if(types.equals("--None--") && cats.equals("--None--") == false && avails.equals("--None--") == false)
                    query = "select * from products where category = '"+cats+"' and availability = '"+avails+"' ";
                if(types.equals("--None--") == false && cats.equals("--None--") && avails.equals("--None--") == false)
                    query = "select * from products where type = '"+types+"' and availability = '"+avails+"' ";
                //System.out.println(query);
                return query;
            }
        }
    }

    private void deleteProduct(String pid) {
         //To change body of generated methods, choose Tools | Templates.
         Connection con = getConnection();
         try
         {
             Statement s=con.createStatement();
             s.executeUpdate("delete from products where productID = "+pid);
             //s.executeUpdate("delete from orders where orderID = "+cid);
             con.close();
         }
         catch(Exception e)
         {
             JOptionPane.showMessageDialog(this,"Cannot DELETE this PRODUCT");
             System.out.println(e);
         }
    }
}
