/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package caffe;

import com.mysql.jdbc.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.Statement;
import java.text.SimpleDateFormat;
import javax.swing.JOptionPane;
import org.jdesktop.swingx.autocomplete.AutoCompleteDecorator;

/**
 *
 * @author HP
 */
public class viewStaff extends javax.swing.JFrame {

    /**
     * Creates new form viewStaff
     */
    int i=34;
    
    public viewStaff() {
        initComponents();
        this.setBounds(495, 270, 990, 540);
        AutoCompleteDecorator.decorate(pn);
        select.setSelectedItem("Select All Staff");
        setPN();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        table = new javax.swing.JTable();
        jButton1 = new javax.swing.JButton();
        viewAll = new javax.swing.JComboBox<>();
        select = new javax.swing.JComboBox<>();
        ob = new javax.swing.JLabel();
        sal = new javax.swing.JTextField();
        arth = new javax.swing.JComboBox<>();
        view = new javax.swing.JButton();
        ord = new javax.swing.JComboBox<>();
        grp = new javax.swing.JComboBox<>();
        word = new javax.swing.JComboBox<>();
        sal_l = new javax.swing.JLabel();
        to = new javax.swing.JLabel();
        from = new javax.swing.JLabel();
        to_dc = new com.toedter.calendar.JDateChooser();
        from_dc = new com.toedter.calendar.JDateChooser();
        pn = new javax.swing.JComboBox<>();
        pn_l = new javax.swing.JLabel();
        view_ps = new javax.swing.JComboBox<>();
        view_bs = new javax.swing.JComboBox<>();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(null);

        table.setFont(new java.awt.Font("Malgun Gothic", 3, 16)); // NOI18N
        table.setForeground(new java.awt.Color(255, 51, 51));
        table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {}
            },
            new String [] {

            }
        ));
        table.setRowHeight(30);
        jScrollPane1.setViewportView(table);

        getContentPane().add(jScrollPane1);
        jScrollPane1.setBounds(0, 190, 970, 240);

        jButton1.setFont(new java.awt.Font("Malgun Gothic", 1, 24)); // NOI18N
        jButton1.setText("<- Back");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton1);
        jButton1.setBounds(390, 440, 125, 44);

        viewAll.setFont(new java.awt.Font("Malgun Gothic", 0, 16)); // NOI18N
        viewAll.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "view by salary", "view by joining date", "view by leaving date", "view all" }));
        viewAll.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                viewAllItemStateChanged(evt);
            }
        });
        getContentPane().add(viewAll);
        viewAll.setBounds(0, 71, 173, 35);

        select.setFont(new java.awt.Font("Malgun Gothic", 0, 16)); // NOI18N
        select.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Select All Billing Staff", "Select Particular Billing Staff", "Select All Staff" }));
        select.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                selectItemStateChanged(evt);
            }
        });
        getContentPane().add(select);
        select.setBounds(0, 0, 230, 35);

        ob.setFont(new java.awt.Font("Malgun Gothic", 1, 20)); // NOI18N
        ob.setText("Order By");
        getContentPane().add(ob);
        ob.setBounds(640, 10, 90, 27);

        sal.setFont(new java.awt.Font("Malgun Gothic", 0, 18)); // NOI18N
        getContentPane().add(sal);
        sal.setBounds(380, 70, 109, 31);

        arth.setFont(new java.awt.Font("Malgun Gothic", 0, 18)); // NOI18N
        arth.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "=", "<=", ">=", "<", ">", "!=" }));
        getContentPane().add(arth);
        arth.setBounds(289, 70, 70, 35);

        view.setFont(new java.awt.Font("Malgun Gothic", 1, 22)); // NOI18N
        view.setText("View");
        view.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewActionPerformed(evt);
            }
        });
        getContentPane().add(view);
        view.setBounds(850, 130, 92, 39);

        ord.setFont(new java.awt.Font("Malgun Gothic", 0, 18)); // NOI18N
        ord.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "asc", "desc" }));
        getContentPane().add(ord);
        ord.setBounds(900, 10, 64, 35);

        grp.setFont(new java.awt.Font("Malgun Gothic", 0, 18)); // NOI18N
        grp.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "make group", "dont make group" }));
        grp.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                grpItemStateChanged(evt);
            }
        });
        getContentPane().add(grp);
        grp.setBounds(800, 70, 160, 35);

        word.setFont(new java.awt.Font("Malgun Gothic", 0, 18)); // NOI18N
        word.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "StaffID", "Joining_Date", "Salary" }));
        getContentPane().add(word);
        word.setBounds(740, 10, 140, 35);

        sal_l.setFont(new java.awt.Font("Malgun Gothic", 1, 20)); // NOI18N
        sal_l.setText("Salary");
        getContentPane().add(sal_l);
        sal_l.setBounds(220, 70, 57, 27);

        to.setFont(new java.awt.Font("Malgun Gothic", 1, 20)); // NOI18N
        to.setText("To");
        getContentPane().add(to);
        to.setBounds(430, 70, 50, 30);

        from.setFont(new java.awt.Font("Malgun Gothic", 1, 20)); // NOI18N
        from.setText("From");
        getContentPane().add(from);
        from.setBounds(200, 70, 60, 30);

        to_dc.setFont(new java.awt.Font("Tahoma", 0, 15)); // NOI18N
        getContentPane().add(to_dc);
        to_dc.setBounds(460, 70, 160, 30);

        from_dc.setFont(new java.awt.Font("Tahoma", 0, 15)); // NOI18N
        getContentPane().add(from_dc);
        from_dc.setBounds(260, 70, 160, 30);

        pn.setFont(new java.awt.Font("Malgun Gothic", 0, 15)); // NOI18N
        pn.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { }));
        pn.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                pnItemStateChanged(evt);
            }
        });
        getContentPane().add(pn);
        pn.setBounds(360, 0, 160, 30);

        pn_l.setFont(new java.awt.Font("Malgun Gothic", 1, 20)); // NOI18N
        pn_l.setText("Phone No.");
        getContentPane().add(pn_l);
        pn_l.setBounds(250, 0, 110, 30);

        view_ps.setFont(new java.awt.Font("Malgun Gothic", 0, 17)); // NOI18N
        view_ps.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "orders staff sold by date", "all orders staff sold", "products staff sold most" }));
        view_ps.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                view_psItemStateChanged(evt);
            }
        });
        getContentPane().add(view_ps);
        view_ps.setBounds(330, 120, 230, 40);

        view_bs.setFont(new java.awt.Font("Malgun Gothic", 0, 17)); // NOI18N
        view_bs.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "all orders staff sold by date", "all orders staff sold" }));
        view_bs.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                view_bsItemStateChanged(evt);
            }
        });
        getContentPane().add(view_bs);
        view_bs.setBounds(330, 120, 230, 40);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        master_staff ms = new master_staff();
        ms.setVisible(true);
        this.dispose();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void selectItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_selectItemStateChanged
        // TODO add your handling code here:
        String s = select.getSelectedItem().toString();
        setFalse();
        if(s.equals("Select All Staff"))
        {
            
            viewAll.setVisible(true);
            word.setVisible(true);
            ord.setVisible(true);
            grp.setVisible(true);
            ob.setVisible(true);
            viewAll.setSelectedItem("view all");
            i=34;
        }
        if(s.equals("Select Particular Billing Staff"))
        {
            pn.setVisible(true);
            pn_l.setVisible(true);
            view_ps.setVisible(true);
            view_ps.setSelectedItem("all orders staff sold");
            i=22;
        }
        if(s.equals("Select All Billing Staff"))
        {
            view_bs.setVisible(true);
            view_bs.setSelectedItem("all orders staff sold");
            i=12;
        }
    }//GEN-LAST:event_selectItemStateChanged

    private void viewAllItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_viewAllItemStateChanged
        // TODO add your handling code here:
        String s = viewAll.getSelectedItem().toString();
        setFalse();
        grp.setSelectedItem("dont make group");
        viewAll.setVisible(true);
        word.setVisible(true);
        ord.setVisible(true);
        grp.setVisible(true);
        ob.setVisible(true);
        if(s.equals("view by salary"))
        {
            i=31;
            sal_l.setVisible(true);
            sal.setVisible(true);
            arth.setVisible(true);
            //i=31;
        }
        if(s.equals("view by joining date"))
        {
            i=32;
            from.setVisible(true);
            from_dc.setVisible(true);
            to.setVisible(true);
            to_dc.setVisible(true);
            //i=32;
        }
        if(s.equals("view by leaving date"))
        {
            i=33;
            from.setVisible(true);
            from_dc.setVisible(true);
            to.setVisible(true);
            to_dc.setVisible(true);
            
        }
        if(s.equals("view all"))
        {
            i=34;
            System.out.println("in all");
        }
    }//GEN-LAST:event_viewAllItemStateChanged

    private void viewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewActionPerformed
        // TODO add your handling code here:
        String query = setQuery();
        Connection con = getConnection();
        if(con!=null)
        {
            try
            {
                Statement s=con.createStatement();
                ResultSet rs=s.executeQuery(query);
                //String ID = id.getText();
                
               // System.out.println(ID +"1"+PN+"2"+s_type);
                mymodel mm = new mymodel(rs);
                table.setModel(mm);
                //con.close();
            }
            catch(Exception e)
            {
                System.out.println(e);
                JOptionPane.showMessageDialog(this,"INCORRECT details entered");
            }
                
        }
        
    }//GEN-LAST:event_viewActionPerformed

    private void pnItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_pnItemStateChanged
        // TODO add your handling code here:
        
    }//GEN-LAST:event_pnItemStateChanged

    private void view_psItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_view_psItemStateChanged
        // TODO add your handling code here:
        String s = view_ps.getSelectedItem().toString();
        if(s.equals("orders staff sold by date"))
        {
            i=21;
            from.setVisible(true);
            from_dc.setVisible(true);
            to.setVisible(true);
            to_dc.setVisible(true);
        }
        if(s.equals("all orders staff sold"))
        {
            i=22;
            from.setVisible(false);
            from_dc.setVisible(false);
            to.setVisible(false);
            to_dc.setVisible(false);
        }
        if(s.equals("products staff sold most"))
        {
            i=23;
            from.setVisible(false);
            from_dc.setVisible(false);
            to.setVisible(false);
            to_dc.setVisible(false);
        }
    }//GEN-LAST:event_view_psItemStateChanged

    private void view_bsItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_view_bsItemStateChanged
        // TODO add your handling code here:
        String s = view_bs.getSelectedItem().toString();
        if(s.equals("all orders staff sold by date"))
        {
            i=11;
            from.setVisible(true);
            from_dc.setVisible(true);
            to.setVisible(true);
            to_dc.setVisible(true);
            //System.out.print("in batch");
        }
        if(s.equals("all orders staff sold"))
        {
            i=12;
            from.setVisible(false);
            from_dc.setVisible(false);
            to.setVisible(false);
            to_dc.setVisible(false);
        }
    }//GEN-LAST:event_view_bsItemStateChanged

    private void grpItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_grpItemStateChanged
        // TODO add your handling code here:
        String s = grp.getSelectedItem().toString();
        if(s.equals("make group"))
        {
            word.setVisible(false);
            ord.setVisible(false);
            ob.setVisible(false);
        }
        else
        {
            word.setVisible(true);
            ord.setVisible(true);
            ob.setVisible(true);
        }
    }//GEN-LAST:event_grpItemStateChanged

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(viewStaff.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(viewStaff.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(viewStaff.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(viewStaff.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new viewStaff().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> arth;
    private javax.swing.JLabel from;
    private com.toedter.calendar.JDateChooser from_dc;
    private javax.swing.JComboBox<String> grp;
    private javax.swing.JButton jButton1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel ob;
    private javax.swing.JComboBox<String> ord;
    private javax.swing.JComboBox<String> pn;
    private javax.swing.JLabel pn_l;
    private javax.swing.JTextField sal;
    private javax.swing.JLabel sal_l;
    private javax.swing.JComboBox<String> select;
    private javax.swing.JTable table;
    private javax.swing.JLabel to;
    private com.toedter.calendar.JDateChooser to_dc;
    private javax.swing.JButton view;
    private javax.swing.JComboBox<String> viewAll;
    private javax.swing.JComboBox<String> view_bs;
    private javax.swing.JComboBox<String> view_ps;
    private javax.swing.JComboBox<String> word;
    // End of variables declaration//GEN-END:variables

    private void setFalse() {
         //To change body of generated methods, choose Tools | Templates.
         viewAll.setVisible(false);
         sal_l.setVisible(false);
         sal.setVisible(false);
         arth.setVisible(false);
         word.setVisible(false);
         ord.setVisible(false);
         grp.setVisible(false);
         ob.setVisible(false);
         from.setVisible(false);
         from_dc.setVisible(false);
         to.setVisible(false);
         to_dc.setVisible(false);
         pn.setVisible(false);
         pn_l.setVisible(false);
         view_ps.setVisible(false);
         view_bs.setVisible(false);
    }

    private String setQuery() {
         //To change body of generated methods, choose Tools | Templates.
         String query = null;
         System.out.println(i);
         int j = i/10;
        if(j==3)
        {
            String words = word.getSelectedItem().toString();
            String ords = ord.getSelectedItem().toString();
            String grps = grp.getSelectedItem().toString();
            if(grps.equals("dont make group"))
                grps = "";
            else
            {
                grps = "type asc";
                words = "";
                ords = "";
            }
            if(i==34)
                query = "select * from staff  order by "+words+grps+" "+ords;
            if(i==31 && !sal.getText().equals(""))
                query = "select * from staff where salary"+arth.getSelectedItem().toString()+sal.getText()+" order by "+words+grps+" "+ords;
            SimpleDateFormat sdf1 = new SimpleDateFormat("yyyy-MM-dd");
            String fromd = "";
            String tod = "";
            try
            {
                fromd = sdf1.format(from_dc.getDate());
                tod = sdf1.format(to_dc.getDate());
                System.out.println(fromd);
                System.out.println(tod);
            }
            catch(Exception e)
            {
                System.out.println(e);
            }
            if(i==32 && !fromd.equals("") && !tod.equals(""))
                query = "select * from staff where joining_date between '"+fromd+"' and '"+tod+"' order by "+words+grps+" "+ords;
            if(i==33 && !fromd.equals("") && !tod.equals(""))
                query = "select * from staff where leaving_date between '"+fromd+"' and '"+tod+"' order by "+words+grps+" "+ords;
        }
        
        if(j==2)
        {
            SimpleDateFormat sdf1 = new SimpleDateFormat("yyyy-MM-dd");
            String fromd = "";
            String tod = "";
            try
            {
                pn.getSelectedItem().toString();
            }
            catch(Exception e)
            {
                pn.setSelectedItem("");
                System.out.println(e);
            }
            try
            {
                
                fromd = sdf1.format(from_dc.getDate());
                tod = sdf1.format(to_dc.getDate());
                System.out.println(fromd);
                System.out.println(tod);
            }
            catch(Exception e)
            {
                //pn.setSelectedItem("");
                System.out.println(e);
            }
            if(i==21 && !pn.getSelectedItem().equals("")&& !fromd.equals("") && !tod.equals(""))
                query = "select orderID,staff.name,customers.name,order_date,amount,orders.status from orders inner join staff on orders.staffID = staff.staffID inner join customers on orders.customerID = customers.customerID where orders.staffID = (select staff.staffID from staff where staff.phone_no ='"+pn.getSelectedItem().toString()+"' ) and Order_date between '"+fromd+"' and '"+tod+"' order by order_date desc";
            if(i==22 && !pn.getSelectedItem().equals(""))
                query = "select orderID,staff.name,customers.name,order_date,amount,orders.status from orders inner join staff on orders.staffID = staff.staffID inner join customers on orders.customerID = customers.customerID where orders.staffID = (select staff.staffID from staff where staff.phone_no ='"+pn.getSelectedItem().toString()+"' ) order by order_date desc";
            if(i==23 &&!pn.getSelectedItem().equals(""))
                query = "select staffID,Staff_Name,Product_Name,sum(quantity) as 'Quantity_Sold' from (select staff.staffID,staff.name as 'Staff_Name',products.name as 'Product_Name',ord_pro_qu.quantity from orders inner join ord_pro_qu on orders.orderID = ord_pro_qu.orderID inner join staff on orders.staffID = staff.staffID inner join products on products.productID=ord_pro_qu.productID where orders.orderID in (select orderID from orders where staffID = (select staff.staffID from staff where staff.phone_no ='"+pn.getSelectedItem().toString()+"') ))ex group by product_name order by quantity_sold desc";
        }
        
        if(j==1)
        {
            SimpleDateFormat sdf1 = new SimpleDateFormat("yyyy-MM-dd");
            String fromd = "";
            String tod = "";
            
            try
            {
                
                fromd = sdf1.format(from_dc.getDate());
                tod = sdf1.format(to_dc.getDate());
                System.out.println(fromd);
                System.out.println(tod);
            }
            catch(Exception e)
            {
                //pn.setSelectedItem("");
                System.out.println(e);
            }
            if(i==12 )
                query = "select staffID , Staff_Name , count(amount) as 'No. of Orders' , sum(amount) as 'Total_Amount' from (select staff.staffID,staff.name as 'Staff_Name' , amount from orders inner join staff on orders.staffID = staff.staffID  )ex group by staffID order by Total_Amount desc";
            if(i==11 &&!fromd.equals("") && !tod.equals(""))
                query = "select staffID , Staff_Name , count(amount) as 'No. of Orders' , sum(amount) as 'Total_Amount' from (select staff.staffID,staff.name as 'Staff_Name' , amount from orders inner join staff on orders.staffID = staff.staffID where Order_date between '"+fromd+"' and '"+tod+"' )ex group by staffID order by Total_Amount desc";
            
        }
         //System.out.println(i+" "+j);
         System.out.println(query);
         return query;
    }

    private Connection getConnection() {
         //To change body of generated methods, choose Tools | Templates.
         try
         {
             Class.forName("com.mysql.jdbc.Driver");
             Connection con =(Connection) DriverManager.getConnection("jdbc:mysql://localhost:3306/cafe","root","");
             return con;
         }
         catch(Exception e)
         {
             System.out.println(e);
             Connection con = null;
             return con;
         }
    }

    private void setPN() {
         //To change body of generated methods, choose Tools | Templates.
         Connection con = getConnection();
         try
         {
             Statement s=con.createStatement();
             ResultSet rs=s.executeQuery("select phone_no from staff where type = 'Billing Staff' or type = 'Master' order by phone_no asc");
             
             pn.addItem("");
             while(rs.next())
                 pn.addItem(rs.getString(1));
             con.close();
         }
         catch(Exception e)
         {
             System.out.println(e);
         }
    }    
}
