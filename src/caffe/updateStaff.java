/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package caffe;

import com.mysql.jdbc.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.Statement;
import javax.swing.JOptionPane;
import javax.swing.table.AbstractTableModel;
import javax.swing.table.TableModel;
import org.jdesktop.swingx.autocomplete.AutoCompleteDecorator;

/**
 *
 * @author HP
 */

class mymodel extends AbstractTableModel {
    
    ResultSet rs;
    ResultSetMetaData rsmd;
    mymodel(ResultSet rs1) {
        try {
            rs = rs1;
            rsmd = rs.getMetaData();
        }
        catch (Exception e) {
            System.out.print(e);
            
        }
    }

    @Override
    public int getRowCount() {
         //To change body of generated methods, choose Tools | Templates.
         try{
            rs.last();
            return rs.getRow();
         }
         catch (Exception e)
         {
             System.out.print(e);
             return -1;
         }
    }

    @Override
    public int getColumnCount() {
         //To change body of generated methods, choose Tools | Templates.
         try {
             return rsmd.getColumnCount();
         }
         catch (Exception e)    {
             System.out.print(e);
             return -1;
         }
    }

    @Override
    public Object getValueAt(int rowIndex, int columnIndex) {
         //To change body of generated methods, choose Tools | Templates.
         try    {
             rs.absolute(rowIndex+1);
             return rs.getObject(columnIndex+1);
         }
         catch (Exception e)
         {
             System.out.print(e);
             return null;
         }
    }
    public String getColumnName (int n) {
        try {
                return rsmd.getColumnName(n+1);
        }
        catch (Exception e)
        {
               System.out.print(e);
               return null;
        }
    }
        
}



public class updateStaff extends javax.swing.JFrame {

    /**
     * Creates new form updateStaff
     */
    public updateStaff() {
        initComponents();
        this.setBounds(495, 270, 990, 540);
        AutoCompleteDecorator.decorate(phone_no);
        setPN();
        viewc.setSelectedItem("View All");
        view.doClick();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        pn_l = new javax.swing.JLabel();
        type_l = new javax.swing.JLabel();
        phone_no = new javax.swing.JComboBox<>();
        update = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        table = new javax.swing.JTable();
        view = new javax.swing.JButton();
        back = new javax.swing.JButton();
        status_l = new javax.swing.JLabel();
        status = new javax.swing.JComboBox<>();
        viewc = new javax.swing.JComboBox<>();
        type = new javax.swing.JComboBox<>();
        del = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(null);

        pn_l.setFont(new java.awt.Font("Malgun Gothic", 1, 24)); // NOI18N
        pn_l.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        pn_l.setText("Phone no.");
        getContentPane().add(pn_l);
        pn_l.setBounds(157, 13, 117, 25);

        type_l.setFont(new java.awt.Font("Malgun Gothic", 1, 24)); // NOI18N
        type_l.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        type_l.setText("Type");
        getContentPane().add(type_l);
        type_l.setBounds(426, 7, 55, 33);

        phone_no.setFont(new java.awt.Font("Malgun Gothic", 0, 18)); // NOI18N
        phone_no.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { }));
        getContentPane().add(phone_no);
        phone_no.setBounds(291, 11, 130, 31);

        update.setFont(new java.awt.Font("Malgun Gothic", 1, 24)); // NOI18N
        update.setText("Update");
        update.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateActionPerformed(evt);
            }
        });
        getContentPane().add(update);
        update.setBounds(440, 390, 115, 41);

        table.setFont(new java.awt.Font("Malgun Gothic", 3, 16)); // NOI18N
        table.setForeground(new java.awt.Color(255, 51, 51));
        table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "ID", "Name", "Phone No.", "Date of Join", "Type", "Salary", "userID", "password", "Date of Leaving", "Status"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        table.setRowHeight(30);
        jScrollPane1.setViewportView(table);

        getContentPane().add(jScrollPane1);
        jScrollPane1.setBounds(0, 77, 970, 276);

        view.setFont(new java.awt.Font("Malgun Gothic", 1, 24)); // NOI18N
        view.setText("View");
        view.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewActionPerformed(evt);
            }
        });
        getContentPane().add(view);
        view.setBounds(872, 7, 89, 41);

        back.setFont(new java.awt.Font("Malgun Gothic", 1, 24)); // NOI18N
        back.setText("<- Back");
        back.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backActionPerformed(evt);
            }
        });
        getContentPane().add(back);
        back.setBounds(50, 394, 121, 41);

        status_l.setFont(new java.awt.Font("Malgun Gothic", 1, 24)); // NOI18N
        status_l.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        status_l.setText("Status");
        getContentPane().add(status_l);
        status_l.setBounds(654, 7, 71, 33);

        status.setFont(new java.awt.Font("Malgun Gothic", 0, 18)); // NOI18N
        status.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] {"--None--","Working","Not Working" }));
        getContentPane().add(status);
        status.setBounds(730, 11, 130, 31);

        viewc.setFont(new java.awt.Font("Malgun Gothic", 0, 18)); // NOI18N
        viewc.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] {"View by others","View by mobile no.","View All" }));
        viewc.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                viewcItemStateChanged(evt);
            }
        });
        getContentPane().add(viewc);
        viewc.setBounds(9, 13, 143, 31);

        type.setFont(new java.awt.Font("Malgun Gothic", 0, 18)); // NOI18N
        type.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] {"--None--", "Billing Staff", "Kitchen Staff", "Cleaning Staff", "Serving Staff" }));
        getContentPane().add(type);
        type.setBounds(506, 11, 130, 31);

        del.setFont(new java.awt.Font("Malgun Gothic", 1, 24)); // NOI18N
        del.setText("Delete");
        del.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                delActionPerformed(evt);
            }
        });
        getContentPane().add(del);
        del.setBounds(810, 390, 110, 40);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void viewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewActionPerformed
        // TODO add your handling code here:
        String query = setQuery();
        Connection con = getConnection();
        if(con!=null)
        {
            try
            {
                Statement s=con.createStatement();
                ResultSet rs=s.executeQuery(query);
                //String ID = id.getText();
                
               // System.out.println(ID +"1"+PN+"2"+s_type);
                mymodel mm = new mymodel(rs);
                table.setModel(mm);
                //con.close();
            }
            catch(Exception e)
            {
                System.out.println(e);
            }
                
        }
        
    }//GEN-LAST:event_viewActionPerformed

    private void backActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backActionPerformed
        // TODO add your handling code here:
        master_staff ms = new master_staff();
        ms.setVisible(true);
        this.dispose();
    }//GEN-LAST:event_backActionPerformed

    private void updateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateActionPerformed
        // TODO add your handling code here:
        try
        {
            TableModel model = (TableModel) table.getModel();
            int row = table.getSelectedRow();

            String ID = model.getValueAt(row, 0).toString();
            if(!ID.equals("1"))
            {
                addStaff as = new addStaff(ID);
                as.setVisible(true);
                this.dispose();
            }
            else
                JOptionPane.showMessageDialog(this,"Cannot Update/Delete Master");
            
        }
        catch (Exception e)
        {
            JOptionPane.showMessageDialog(this,"Please select Staff details from Table");
        }
    }//GEN-LAST:event_updateActionPerformed

    private void viewcItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_viewcItemStateChanged
        // TODO add your handling code here:
        if(viewc.getSelectedItem().toString().equals("View by mobile no."))
        {
            pn_l.setVisible(true);
            phone_no.setVisible(true);
            type_l.setVisible(false);
            type.setVisible(false);
            status.setVisible(false);
            status_l.setVisible(false);
        }
        else
            if(viewc.getSelectedItem().toString().equals("View by others"))
            {
                pn_l.setVisible(false);
                phone_no.setVisible(false);
                type_l.setVisible(true);
                type.setVisible(true);
                status.setVisible(true);
                status_l.setVisible(true);
            }
        else
            {
                pn_l.setVisible(false);
                phone_no.setVisible(false);
                type_l.setVisible(false);
                type.setVisible(false);
                status.setVisible(false);
                status_l.setVisible(false);
            }
    }//GEN-LAST:event_viewcItemStateChanged

    private void delActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_delActionPerformed
        // TODO add your handling code here:
        try
        {
            TableModel model = (TableModel) table.getModel();
            int row = table.getSelectedRow();

            String sid = model.getValueAt(row, 0).toString();
            int resp = JOptionPane.showConfirmDialog(this, "Do you want to DELETE this STAFF","Confirm", JOptionPane.YES_NO_OPTION, JOptionPane.WARNING_MESSAGE);
            if(resp == JOptionPane.YES_OPTION)
            {
                deleteStaff(sid);
                view.doClick();
            }

        }
        catch (Exception e)
        {
            JOptionPane.showMessageDialog(this,"Please select Order details from Table");
        }
    }//GEN-LAST:event_delActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(updateStaff.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(updateStaff.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(updateStaff.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(updateStaff.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new updateStaff().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton back;
    private javax.swing.JButton del;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JComboBox<String> phone_no;
    private javax.swing.JLabel pn_l;
    private javax.swing.JComboBox<String> status;
    private javax.swing.JLabel status_l;
    private javax.swing.JTable table;
    private javax.swing.JComboBox<String> type;
    private javax.swing.JLabel type_l;
    private javax.swing.JButton update;
    private javax.swing.JButton view;
    private javax.swing.JComboBox<String> viewc;
    // End of variables declaration//GEN-END:variables

    private Connection getConnection() {
         //To change body of generated methods, choose Tools | Templates.
         try
         {
             Class.forName("com.mysql.jdbc.Driver");
             Connection con =(Connection) DriverManager.getConnection("jdbc:mysql://localhost:3306/cafe","root","");
             return con;
         }
         catch(Exception e)
         {
             System.out.println(e);
             Connection con = null;
             return con;
         }
    }

    private String setQuery() {
         //To change body of generated methods, choose Tools | Templates.
         String query = null;
         String PN = phone_no.getSelectedItem().toString();
         String s_type = type.getSelectedItem().toString();
         String s_status = status.getSelectedItem().toString();
         
         if(viewc.getSelectedItem().toString().equals("View All"))
             query = "select * from staff order by staffID asc";
         if(viewc.getSelectedItem().toString().equals("View by mobile no."))
             query = "select * from staff where staffid != 1 and phone_no = '"+PN+"' ";
         if(viewc.getSelectedItem().toString().equals("View by others"))
         {
             if(s_type.equals("--None--") && s_status.equals("--None--"))
                 query = "select * from staff where staffid != 1 and phone_no = '' ";
             if(s_type.equals("--None--") == false && s_status.equals("--None--") == false)
                    query = "select * from staff where staffid != 1 and type = '"+s_type+"' and status = '"+s_status+"' ";
             if(s_type.equals("--None--")  && s_status.equals("--None--") == false)
                    query = "select * from staff where staffid != 1 and status = '"+s_status+"' ";
             if(s_type.equals("--None--") == false && s_status.equals("--None--") )
                    query = "select * from staff where staffid != 1 and type = '"+s_type+"' ";
         }
         return query;
    }

    private void setPN() {
         //To change body of generated methods, choose Tools | Templates.
         Connection con = getConnection();
         try
         {
             Statement s=con.createStatement();
             ResultSet rs=s.executeQuery("select phone_no from staff where staffid != 1 order by phone_no asc");
             phone_no.addItem("");
             while(rs.next())
                 phone_no.addItem(rs.getString(1));
             con.close();
         }
         catch(Exception e)
         {
             System.out.println(e);
         }
    }

    private void deleteStaff(String sid) {
         //To change body of generated methods, choose Tools | Templates.
         Connection con = getConnection();
         try
         {
             if(sid.equals("1"))
                 throw new Exception ("Master cannot be deleted");
             Statement s=con.createStatement();
             s.executeUpdate("delete from staff where staffID = "+sid);
             //s.executeUpdate("delete from orders where orderID = "+cid);
             con.close();
         }
         catch(Exception e)
         {
             
             System.out.println(e);
             JOptionPane.showMessageDialog(this,"Cannot DELETE this STAFF");
         }
    }
}
