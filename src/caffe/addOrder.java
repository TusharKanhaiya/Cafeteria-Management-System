/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package caffe;

import com.mysql.jdbc.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.Statement;
import java.text.SimpleDateFormat;
import java.util.Date;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;
import org.jdesktop.swingx.autocomplete.AutoCompleteDecorator;

/**
 *
 * @author HP
 */
public class addOrder extends javax.swing.JFrame {

    /**
     * Creates new form addOrder
     */
    public String pn_ao;
    private String statusQ;
    int kl=0;
    
    public addOrder() {
        initComponents();
        this.setBounds(495, 270, 990, 540);
        SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");  
        Date date1 = new Date();  
        date.setText(sdf.format(date1));
        id.setEditable(false);
        sid.setText("1");
        sid.setEditable(false);
        doubt.setVisible(false);
        total.setEditable(false);
        AutoCompleteDecorator.decorate(pn);
        AutoCompleteDecorator.decorate(cat);
        AutoCompleteDecorator.decorate(item);
        createTable();
        setID();
        setPN();
    }

    addOrder(String oid) {
        //To change body of generated methods, choose Tools | Templates.
        initComponents();
        this.setBounds(495, 270, 990, 540);
        SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");  
        Date date1 = new Date();  
        date.setText(sdf.format(date1));
        id.setEditable(false);
        sid.setText("1000");
        sid.setEditable(false);
        doubt.setVisible(false);
        total.setEditable(false);
        add.setVisible(false);
        AutoCompleteDecorator.decorate(pn);
        AutoCompleteDecorator.decorate(cat);
        AutoCompleteDecorator.decorate(item);
        save.setText("Update Bill");
        //pn.setEnabled(false);
        id.setText(oid);
        setUpPara();
    }

    addOrder(int j) {
         //To change body of generated methods, choose Tools | Templates.
         kl=j;
         initComponents();
        this.setBounds(495, 270, 990, 540);
        SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");  
        Date date1 = new Date();  
        date.setText(sdf.format(date1));
        id.setEditable(false);
        doubt.setVisible(false);
        sid.setEditable(false);
        sid.setText(String.valueOf(j));
        total.setEditable(false);
        AutoCompleteDecorator.decorate(pn);
        AutoCompleteDecorator.decorate(cat);
        AutoCompleteDecorator.decorate(item);
        createTable();
        setID();
        setPN();
    }

    addOrder(String oid, int kl) {
         //To change body of generated methods, choose Tools | Templates.
         this.kl = kl;
         initComponents();
        this.setBounds(495, 270, 990, 540);
        SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");  
        Date date1 = new Date();  
        date.setText(sdf.format(date1));
        id.setEditable(false);
        sid.setEditable(false);
        doubt.setVisible(false);
        total.setEditable(false);
        add.setVisible(false);
        AutoCompleteDecorator.decorate(pn);
        AutoCompleteDecorator.decorate(cat);
        AutoCompleteDecorator.decorate(item);
        save.setText("Update Bill");
        //pn.setEnabled(false);
        id.setText(oid);
        setUpPara();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel4 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        name = new javax.swing.JTextField();
        email = new javax.swing.JTextField();
        add = new javax.swing.JButton();
        jLabel13 = new javax.swing.JLabel();
        id = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        item = new javax.swing.JComboBox<>();
        date = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        pn = new javax.swing.JComboBox<>();
        cat = new javax.swing.JComboBox<>();
        save = new javax.swing.JButton();
        back = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        table = new javax.swing.JTable();
        jLabel8 = new javax.swing.JLabel();
        total = new javax.swing.JTextField();
        atc = new javax.swing.JButton();
        remove = new javax.swing.JButton();
        jLabel15 = new javax.swing.JLabel();
        pc = new javax.swing.JTextField();
        pay = new javax.swing.JButton();
        doubt = new javax.swing.JButton();
        jLabel16 = new javax.swing.JLabel();
        sid = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(null);

        jPanel1.setBackground(new java.awt.Color(0, 102, 102));
        jPanel1.setForeground(new java.awt.Color(0, 51, 51));

        jLabel4.setFont(new java.awt.Font("Malgun Gothic", 3, 24)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(255, 255, 0));
        jLabel4.setText("CUSTOMER DETAILS");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(74, Short.MAX_VALUE)
                .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(36, 36, 36))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(jLabel4))
        );

        getContentPane().add(jPanel1);
        jPanel1.setBounds(618, 30, 360, 33);

        jPanel2.setBackground(new java.awt.Color(46, 49, 49));

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 10, Short.MAX_VALUE)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 130, Short.MAX_VALUE)
        );

        getContentPane().add(jPanel2);
        jPanel2.setBounds(610, 30, 10, 130);

        jPanel3.setBackground(new java.awt.Color(46, 49, 49));

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 10, Short.MAX_VALUE)
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 130, Short.MAX_VALUE)
        );

        getContentPane().add(jPanel3);
        jPanel3.setBounds(610, 30, 10, 130);

        jLabel11.setFont(new java.awt.Font("Malgun Gothic", 1, 20)); // NOI18N
        jLabel11.setText("Name");
        getContentPane().add(jLabel11);
        jLabel11.setBounds(620, 70, 90, 30);

        jLabel12.setFont(new java.awt.Font("Malgun Gothic", 1, 20)); // NOI18N
        jLabel12.setText("Email ID");
        getContentPane().add(jLabel12);
        jLabel12.setBounds(620, 120, 90, 30);

        name.setFont(new java.awt.Font("Malgun Gothic", 0, 17)); // NOI18N
        getContentPane().add(name);
        name.setBounds(710, 70, 220, 40);

        email.setFont(new java.awt.Font("Malgun Gothic", 0, 17)); // NOI18N
        getContentPane().add(email);
        email.setBounds(710, 120, 230, 40);

        add.setFont(new java.awt.Font("Malgun Gothic", 3, 18)); // NOI18N
        add.setText("ADD");
        add.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addActionPerformed(evt);
            }
        });
        getContentPane().add(add);
        add.setBounds(520, 90, 71, 33);

        jLabel13.setFont(new java.awt.Font("Malgun Gothic", 1, 20)); // NOI18N
        jLabel13.setText("Order No.");
        getContentPane().add(jLabel13);
        jLabel13.setBounds(186, 40, 96, 29);

        id.setFont(new java.awt.Font("Malgun Gothic", 0, 18)); // NOI18N
        getContentPane().add(id);
        id.setBounds(320, 40, 64, 31);

        jLabel1.setFont(new java.awt.Font("Malgun Gothic", 1, 20)); // NOI18N
        jLabel1.setText("Enter Customer Mobile No.");
        getContentPane().add(jLabel1);
        jLabel1.setBounds(12, 81, 272, 45);

        item.setFont(new java.awt.Font("Malgun Gothic", 0, 18)); // NOI18N
        item.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { }));
        getContentPane().add(item);
        item.setBounds(150, 210, 180, 30);

        date.setFont(new java.awt.Font("Malgun Gothic", 1, 26)); // NOI18N
        date.setForeground(new java.awt.Color(0, 102, 255));
        date.setText("12/07/2020");
        getContentPane().add(date);
        date.setBounds(430, 0, 160, 40);

        jLabel3.setFont(new java.awt.Font("Malgun Gothic", 1, 20)); // NOI18N
        jLabel3.setText("Category");
        getContentPane().add(jLabel3);
        jLabel3.setBounds(10, 150, 110, 40);

        jLabel14.setFont(new java.awt.Font("Malgun Gothic", 1, 20)); // NOI18N
        jLabel14.setText("Items");
        getContentPane().add(jLabel14);
        jLabel14.setBounds(40, 210, 52, 27);

        pn.setFont(new java.awt.Font("Malgun Gothic", 0, 18)); // NOI18N
        pn.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { }));
        pn.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                pnItemStateChanged(evt);
            }
        });
        getContentPane().add(pn);
        pn.setBounds(323, 88, 170, 30);

        cat.setFont(new java.awt.Font("Malgun Gothic", 0, 18)); // NOI18N
        cat.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Breads & Noodles","Pizza & Burgers","Dessert","Drinks"}));
        cat.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                catItemStateChanged(evt);
            }
        });
        getContentPane().add(cat);
        cat.setBounds(150, 160, 180, 30);

        save.setFont(new java.awt.Font("Malgun Gothic", 1, 24)); // NOI18N
        save.setText("Save Bill");
        save.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveActionPerformed(evt);
            }
        });
        getContentPane().add(save);
        save.setBounds(590, 440, 170, 40);

        back.setFont(new java.awt.Font("Malgun Gothic", 1, 24)); // NOI18N
        back.setText("<- Back");
        back.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backActionPerformed(evt);
            }
        });
        getContentPane().add(back);
        back.setBounds(119, 427, 170, 41);

        table.setFont(new java.awt.Font("Malgun Gothic", 3, 18)); // NOI18N
        table.setForeground(new java.awt.Color(255, 51, 51));
        table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Name", "Price/Pcs", "Pcs", "Amount"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        table.setGridColor(new java.awt.Color(240, 52, 52));
        table.setRowHeight(30);
        jScrollPane2.setViewportView(table);

        getContentPane().add(jScrollPane2);
        jScrollPane2.setBounds(350, 180, 620, 200);

        jLabel8.setFont(new java.awt.Font("Malgun Gothic", 1, 20)); // NOI18N
        jLabel8.setText("Total Amount");
        getContentPane().add(jLabel8);
        jLabel8.setBounds(660, 390, 131, 27);

        total.setFont(new java.awt.Font("Malgun Gothic", 0, 20)); // NOI18N
        total.setText("0");
        getContentPane().add(total);
        total.setBounds(830, 390, 110, 40);

        atc.setFont(new java.awt.Font("Malgun Gothic", 1, 24)); // NOI18N
        atc.setText("Add to Cart");
        atc.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                atcActionPerformed(evt);
            }
        });
        getContentPane().add(atc);
        atc.setBounds(80, 320, 170, 41);

        remove.setFont(new java.awt.Font("Malgun Gothic", 1, 24)); // NOI18N
        remove.setText("Remove");
        remove.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeActionPerformed(evt);
            }
        });
        getContentPane().add(remove);
        remove.setBounds(370, 390, 170, 41);

        jLabel15.setFont(new java.awt.Font("Malgun Gothic", 1, 20)); // NOI18N
        jLabel15.setText("Pcs");
        getContentPane().add(jLabel15);
        jLabel15.setBounds(60, 260, 50, 29);

        pc.setFont(new java.awt.Font("Malgun Gothic", 0, 18)); // NOI18N
        pc.setText("1");
        getContentPane().add(pc);
        pc.setBounds(160, 260, 70, 31);

        pay.setFont(new java.awt.Font("Malgun Gothic", 1, 24)); // NOI18N
        pay.setText("PAY Bill");
        pay.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                payActionPerformed(evt);
            }
        });
        getContentPane().add(pay);
        pay.setBounds(810, 440, 130, 40);

        doubt.setText("doubt");
        doubt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                doubtActionPerformed(evt);
            }
        });
        getContentPane().add(doubt);
        doubt.setBounds(0, 0, 20, 20);

        jLabel16.setFont(new java.awt.Font("Malgun Gothic", 1, 20)); // NOI18N
        jLabel16.setText("Staff ID");
        getContentPane().add(jLabel16);
        jLabel16.setBounds(10, 40, 80, 29);

        sid.setFont(new java.awt.Font("Malgun Gothic", 0, 18)); // NOI18N
        getContentPane().add(sid);
        sid.setBounds(90, 40, 70, 31);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void backActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backActionPerformed
        // TODO add your handling code here:
        if(!save.getText().equals("Update Bill"))
        {
            if(kl==0)
            {
                orders od = new orders();
                od.setVisible(true);
                this.dispose();
            }
            else
            {
                orders od = new orders(kl);
                od.setVisible(true);
                this.dispose();
            }
        }
        else
        {
            if(kl==0)
            {
                updateOrder uo = new updateOrder();
                uo.setVisible(true);
                this.dispose();
            }
            else
            {
                updateOrder uo = new updateOrder(kl);
                uo.setVisible(true);
                this.dispose();
            }
        }
    }//GEN-LAST:event_backActionPerformed

    private void pnItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_pnItemStateChanged
        // TODO add your handling code here:
        if(pn.getSelectedItem().toString().equals("--None--"))
        {    
            //System.out.println("1");
           // item.removeAllItems();
            add.setVisible(true);
            //System.out.println("2");
            cat.setVisible(false);
            item.setVisible(false);
            name.setText("");
            email.setText("");
            name.setEditable(true);
            email.setEditable(true);
        }
        else
        {
            add.setVisible(false);
            cat.setVisible(true);
            item.setVisible(true);
            name.setEditable(false);
            email.setEditable(false);
            setNameEmail();
            cat.setSelectedItem("Pizza & Burgers");
        }
    }//GEN-LAST:event_pnItemStateChanged

    private void addActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addActionPerformed
        // TODO add your handling code here:
        if(kl==0)
        {
            addCustomer ac = new addCustomer(this);
            ac.setVisible(true);
        }
        else
        {
            addCustomer ac = new addCustomer(this,kl);
            ac.setVisible(true);
        }
    }//GEN-LAST:event_addActionPerformed

    private void doubtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_doubtActionPerformed
        // TODO add your handling code here:
        pn.addItem(pn_ao);
        pn.setSelectedItem(pn_ao);
        cat.setSelectedItem("Pizza & Burgers");
    }//GEN-LAST:event_doubtActionPerformed

    private void catItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_catItemStateChanged
        // TODO add your handling code here:
        setItems();
    }//GEN-LAST:event_catItemStateChanged

    private void atcActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_atcActionPerformed
        // TODO add your handling code here:
        try
        {
            if(pc.getText().equals("") == false && item.isVisible())
            {
                //TableModel tm = table.getModel();
                int  i = checkAndSetName();
                if(i == -1)
                {
                    DefaultTableModel model = (DefaultTableModel)table.getModel();
                    String pr = getPrice();
                    String amount = String.valueOf(Integer.parseInt(pr)*Integer.parseInt(pc.getText()));
                    total.setText(String.valueOf(Integer.parseInt(total.getText())+Integer.parseInt(amount)));
                    Object []ob = { item.getSelectedItem().toString() , pr , pc.getText() , amount};
                    model.addRow(ob);
                }
            }
            else
                throw new Exception("Error in atc"); 
        }
        catch(Exception e)
        {
            System.out.println(e);
        }
    }//GEN-LAST:event_atcActionPerformed

    private void removeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeActionPerformed
        // TODO add your handling code here:
        try
        {
            TableModel tm = (TableModel) table.getModel();
            DefaultTableModel model = (DefaultTableModel)table.getModel();
            int row = table.getSelectedRow();
            //System.out.println(tm.getRowCount());
            String amount = tm.getValueAt(row, 3).toString();
            total.setText(String.valueOf(Integer.parseInt(total.getText())-Integer.parseInt(amount)));
            model.removeRow(row);
        }
        catch(Exception e)
        {
            System.out.println(e);
        }
    }//GEN-LAST:event_removeActionPerformed

    private void saveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveActionPerformed
        // TODO add your handling code here: 
        
        Connection con = getConnection();
        if(!save.getText().equals("Update Bill"))
        {
            try
            {
                TableModel tm = (TableModel) table.getModel();
                int max = tm.getRowCount();
                if(max>0)
                {
                    statusQ = "Not Paid";
                    deleteOrd_pro_qu(con);
                    saveOrderTable(con);
                    saveOrd_Pro_Qu(con);
                    con.close();
                    setID();
                }
                else
                    JOptionPane.showMessageDialog(this,"Incorrect Order");
            }
            catch(Exception e)
            {
                System.out.println("in save bill 1"+e);
            }
        }
        else
        {
            try
            {
                TableModel tm = (TableModel) table.getModel();
                int max = tm.getRowCount();
                if(max>0)
                {
                    statusQ = "Not Paid";
                    deleteOrd_pro_qu(con);
                    saveUpOrderTable(con);
                    saveOrd_Pro_Qu(con);
                    con.close();
                    //setID();
                }
                else
                    JOptionPane.showMessageDialog(this,"Incorrect Order");
                if(kl==0)
                {
                    updateOrder uo = new updateOrder();
                    uo.setVisible(true);
                    this.dispose();
                }
                else
                {
                    updateOrder uo = new updateOrder(kl);
                    uo.setVisible(true);
                    this.dispose();
                }
            }
            catch(Exception e)
            {
                System.out.println("in save bill"+e);
                
            }
        }
    }//GEN-LAST:event_saveActionPerformed

    private void payActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_payActionPerformed
        // TODO add your handling code here:
        Connection con = getConnection();
        if(!save.getText().equals("Update Bill"))
        {
            try
            {
                TableModel tm = (TableModel) table.getModel();
                int max = tm.getRowCount();
                if(max>0)
                {
                    statusQ = "Paid";
                    deleteOrd_pro_qu(con);
                    saveOrderTable(con);
                    saveOrd_Pro_Qu(con);
                    con.close();
                    setID();
                }
                else
                    JOptionPane.showMessageDialog(this,"Incorrect Order");
            }
            catch(Exception e)
            {
                System.out.println("in save bill 1"+e);
            }
        }
        else
        {
            try
            {
                TableModel tm = (TableModel) table.getModel();
                int max = tm.getRowCount();
                if(max>0)
                {
                    statusQ = "Paid";
                    deleteOrd_pro_qu(con);
                    saveUpOrderTable(con);
                    saveOrd_Pro_Qu(con);
                    con.close();
                    //setID();
                }
                else
                    JOptionPane.showMessageDialog(this,"Incorrect Order");
                if(kl==0)
                {
                    updateOrder uo = new updateOrder();
                    uo.setVisible(true);
                    this.dispose();
                }
                else
                {
                    updateOrder uo = new updateOrder(kl);
                    uo.setVisible(true);
                    this.dispose();
                }
            }
            catch(Exception e)
            {
                System.out.println("in save bill"+e);
                
            }
        }
    }//GEN-LAST:event_payActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(addOrder.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(addOrder.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(addOrder.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(addOrder.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new addOrder().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton add;
    private javax.swing.JButton atc;
    private javax.swing.JButton back;
    private javax.swing.JComboBox<String> cat;
    private javax.swing.JLabel date;
    public static javax.swing.JButton doubt;
    private javax.swing.JTextField email;
    private javax.swing.JTextField id;
    private javax.swing.JComboBox<String> item;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextField name;
    private javax.swing.JButton pay;
    private javax.swing.JTextField pc;
    private javax.swing.JComboBox<String> pn;
    private javax.swing.JButton remove;
    private javax.swing.JButton save;
    private javax.swing.JTextField sid;
    private javax.swing.JTable table;
    private javax.swing.JTextField total;
    // End of variables declaration//GEN-END:variables

    private void setAll() {
        //To change body of generated methods, choose Tools | Templates.
        
    }

    private void createTable() {
         //To change body of generated methods, choose Tools | Templates.
        Connection con = getConnection();
        try
        {
                 try{   
                    PreparedStatement  create  = con.prepareStatement("CREATE TABLE CUSTOMERS(customerID int primary key auto_increment , name varchar(30) not null check(name!='') ,phone_no varchar(30) not null unique check(phone_no!='') , email varchar(30) unique)");
                    create.executeUpdate();
                 }
                 catch(Exception e)
                 {
                     System.out.println(e);
                    PreparedStatement create  = con.prepareStatement("CREATE TABLE ORDERS(orderID int primary key auto_increment , staffID int not null, customerID int not null , Order_Date date not null, Amount int not null ,status varchar(10) not null , constraint staffID foreign key (staffID) references staff (staffID) , constraint customerID foreign key (customerID) references customers (customerID)   )");
                    create.executeUpdate();
                    //System.out.println("table created");
                    create = con.prepareStatement("CREATE TABLE ord_pro_qu(orderID int not null , productID int not null , quantity int not null, constraint productID foreign key (productID) references products(productID) ,constraint orderID foreign key (orderID) references orders(orderID),  constraint primary key(orderID,productID) )");
                    create.executeUpdate();
                    System.out.println("tables created");
                    con.close();
                 }
                    
        }
        catch(Exception e)
        {
           //JOptionPane.showMessageDialog(this,"error in creating table!");
           System.out.println(e);
        }
    }

    private Connection getConnection() {
         //To change body of generated methods, choose Tools | Templates.
         try
         {
             Class.forName("com.mysql.jdbc.Driver");
             Connection con =(Connection) DriverManager.getConnection("jdbc:mysql://localhost:3306/cafe","root","");
             return con;
         }
         catch(Exception e)
         {
             System.out.println(e);
             Connection con = null;
             return con;
         }
    }

    private void setID() {
         //To change body of generated methods, choose Tools | Templates.
         pn.setSelectedItem("--None--"); 
         total.setText("0");
         removeRows();
         Connection con = getConnection();
         try
           {
               Statement s=con.createStatement();
               ResultSet rs=s.executeQuery("Select orderID from orders order by orderID asc");
                if(rs.last())
                {
                    int id_no = rs.getInt(1);
                    id_no = id_no + 1;
                    id.setText(String.valueOf(id_no));  
                }
                else
                    id.setText("1");
                //System.out.println(rs.last() + "  " + rs.getInt(1));
                //name.setText("");
                //price.setText("");
                con.close();
           }
        catch(Exception e)
        {
            System.out.println(e);
            JOptionPane.showMessageDialog(this,"Please ADD products first");
        }
    }

    private void setPN() {
        //To change body of generated methods, choose Tools | Templates.
        Connection con = getConnection();
         try
         {
             Statement s=con.createStatement();
             ResultSet rs=s.executeQuery("select phone_no from customers order by phone_no asc");
             pn.addItem("--None--");
             while(rs.next())
                 pn.addItem(rs.getString(1));
             con.close();
         }
         catch(Exception e)
         {
             System.out.println("in setPN"+e);
         }
    }

    private void setNameEmail() {
         //To change body of generated methods, choose Tools | Templates.
         Connection con = getConnection();
         try
         {
             Statement s=con.createStatement();
             //System.out.println(pn.getSelectedItem().toString());
             ResultSet rs=s.executeQuery("select name,email from customers where phone_no = '"+pn.getSelectedItem().toString()+"' ");
             rs.next();
             //System.out.println(rs.getString(1));
             name.setText(rs.getString(1));
             //System.out.println(rs.getString(2));
             email.setText(rs.getString(2));
             con.close();
         }
         catch(Exception e)
         {
             System.out.println("in setNameEmail"+e);
         }
    }

    private void setItems() {
         //To change body of generated methods, choose Tools | Templates.
         item.removeAllItems();
         Connection con = getConnection();
         try
         {
             Statement s=con.createStatement();
             ResultSet rs=s.executeQuery("select name from products where category = '"+cat.getSelectedItem().toString()+"' and availability = 'available' order by name asc");
             while(rs.next())
                 item.addItem(rs.getString(1));
             con.close();
         }
         catch(Exception e)
         {
             System.out.println("in setItem"+e);
         }
    }

    private String getPrice() {
         //To change body of generated methods, choose Tools | Templates.
         Connection con = getConnection();
         try
         {
             Statement s=con.createStatement();
             ResultSet rs=s.executeQuery("select price from products where name = '"+item.getSelectedItem().toString()+"' ");
             rs.next();
             String pr = rs.getString(1);
             con.close();
             return pr;
         }
         catch(Exception e)
         {
             System.out.println("in getPrice"+e);
             return null;
         }
    }

    private int checkAndSetName() {
         //To change body of generated methods, choose Tools | Templates.
         try
         {
            TableModel tm = (TableModel) table.getModel();
            int i;
            int max = tm.getRowCount();
            for( i = 0;i<max;i++)
            {
                if(item.getSelectedItem().toString().equals(tm.getValueAt(i, 0).toString()))
                       break;
            }
            if(i != max)
            {
                Object ob = String.valueOf(Integer.parseInt(pc.getText()) + Integer.parseInt(tm.getValueAt(i, 2).toString()));        
                tm.setValueAt(ob, i, 2);
                ob = String.valueOf(Integer.parseInt(tm.getValueAt(i, 1).toString()) *  Integer.parseInt(tm.getValueAt(i, 2).toString()));
                tm.setValueAt(ob, i, 3);
                String pr = tm.getValueAt(i, 1).toString(); 
                total.setText(String.valueOf(Integer.parseInt(total.getText())+(Integer.parseInt(pc.getText())*Integer.parseInt(pr))));
                //System.out.println("In check");
                return 1;
            }
            else
                return -1;
         }
         catch(Exception e)
         {
             System.out.println("in CheckAndSetName"+e);
             return -1;
         }
    }

    private void saveOrderTable(Connection con) {
         //To change body of generated methods, choose Tools | Templates.
         try
         {
             String query = null;
             if(save.getText().equals("Save Bill"))
                query = "insert into orders (staffID,customerID,Order_Date,amount,status) value(?,?,?,?,?)" ;  
             PreparedStatement st = con.prepareStatement(query);
             st.setInt(1, Integer.parseInt(sid.getText()));
             int cid = getCid(con);
             st.setInt(2, cid);
             st.setString(3, date.getText());
             st.setInt(4, Integer.parseInt(total.getText()));
             st.setString(5, statusQ);
             st.execute();
             
         }
         catch(Exception e)
         {
             System.out.println("in saveOrdTable"+e);
         }
    }

    private int getCid(Connection con) {
         //To change body of generated methods, choose Tools | Templates.
         try
         {
             Statement s=con.createStatement();
             ResultSet rs=s.executeQuery("select customerID from customers where phone_no = '"+pn.getSelectedItem().toString()+"' ");
             rs.next();
             return rs.getInt(1);
         }
         catch(Exception e)
         {
             System.out.println("in getCid"+e);
             return -1;
         }
    }

    private void saveOrd_Pro_Qu(Connection con) {
        //To change body of generated methods, choose Tools | Templates.
        try
        {
            TableModel tm = (TableModel) table.getModel();
            int i;
            int max = tm.getRowCount();
            for(i=0;i<max;i++)
            {
                String query = null;
                
                 query = "insert into ord_pro_qu (orderID,productID,quantity) value(?,?,?)" ;  
                 PreparedStatement st = con.prepareStatement(query);
                 st.setInt(1, Integer.parseInt(id.getText()));
                 int pid = getPID(con , tm.getValueAt(i, 0).toString());
                 st.setInt(2,pid);
                 st.setInt(3, Integer.parseInt(tm.getValueAt(i, 2).toString()));
                 st.execute();
            }
            
            if(save.getText().equals("Save Bill"))
                 JOptionPane.showMessageDialog(this,"Order saved SUCCESSFULLY!");
            else
                JOptionPane.showMessageDialog(this,"Order Updated SUCCESSFULLY!");
        }
        catch(Exception e)
        {
            System.out.println("in saveOrd_pro"+e);
        }
    }

    private int getPID(Connection con, String iname) {
         //To change body of generated methods, choose Tools | Templates.
         try
         {
             Statement s=con.createStatement();
             ResultSet rs=s.executeQuery("select productID from products where name = '"+iname+"' ");
             rs.next();
             return rs.getInt(1);
         }
         catch(Exception e)
         {
             System.out.println("in getPID"+e);
             return -1 ;
         }
    }

    private void removeRows() {
         //To change body of generated methods, choose Tools | Templates.
         try
         {
             TableModel tm = (TableModel) table.getModel();
             DefaultTableModel model = (DefaultTableModel)table.getModel();
             int i;
             int max = tm.getRowCount();
             for(i=0;i<max;i++)
                 model.removeRow(0);
             throw new Exception("Removing ");
         }
         catch(Exception e)
         {
             System.out.println(e);
         }
    }

    private void deleteOrd_pro_qu(Connection con) {
         //To change body of generated methods, choose Tools | Templates.
         try
         {
             Statement s=con.createStatement();
             s.executeUpdate("delete from ord_pro_qu where orderID = "+ id.getText());
             
         }
         catch(Exception e)
         {
             System.out.println("in del"+e);
         }
    }

    private void setUpPara() {
        //To change body of generated methods, choose Tools | Templates.
        Connection con = getConnection();
        try
        {
            Statement s=con.createStatement();
            ResultSet rs=s.executeQuery("select staffID,customers.phone_no,amount from orders inner join customers on orders.customerID = customers.customerID where orderID = "+id.getText());
            rs.next();
            sid.setText(rs.getString(1));
            pn.setSelectedItem(rs.getString(2));
            total.setText(rs.getString(3));
            
            rs=s.executeQuery("select products.name as 'Name' , products.price as 'Price/Pcs' , quantity as 'Pcs' , products.price*quantity as 'Amount' from ord_pro_qu inner join products on ord_pro_qu.productID = products.productID where orderID = "+id.getText());
        
            DefaultTableModel model = (DefaultTableModel)table.getModel();
            
            while(rs.next())
            {
                Object []ob = {rs.getString(1),rs.getString(2),rs.getString(3),rs.getString(4) };
                model.addRow(ob);
            }
            con.close();
        }
        catch(Exception e)
        {
            System.out.println(e);
        }
    }

    private void saveUpOrderTable(Connection con) {
         //To change body of generated methods, choose Tools | Templates.
         try
         {
             String query = null;
             query = "update orders set amount=? , status=? where orderID = "+id.getText() ;  
             PreparedStatement st = con.prepareStatement(query);
            // st.setInt(1, Integer.parseInt(sid.getText()));
             //int cid = getCid(con);
             //st.setInt(2, cid);
             //st.setString(3, date.getText());
             st.setInt(1, Integer.parseInt(total.getText()));
             st.setString(2, statusQ);
             st.execute();
             
         }
         catch(Exception e)
         {
             
             System.out.println("in up"+e);
         }
    }
    
    
}
