/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package caffe;

import com.mysql.jdbc.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.Statement;
import javax.swing.JOptionPane;
import javax.swing.table.TableModel;
import org.jdesktop.swingx.autocomplete.AutoCompleteDecorator;

/**
 *
 * @author HP
 */
public class updateCustomer extends javax.swing.JFrame {

    /**
     * Creates new form updateCustomer
     */
    int kl = 0;
    public updateCustomer() {
        initComponents();
        this.setBounds(495, 270, 990, 540);
        AutoCompleteDecorator.decorate(pn);
        AutoCompleteDecorator.decorate(email);
        viewc.setSelectedItem("View All");
        setPN();
        setEmail();
        view.doClick();
    }

    updateCustomer(int j) {
         //To change body of generated methods, choose Tools | Templates.
         kl=j;
         initComponents();
        this.setBounds(495, 270, 990, 540);
        AutoCompleteDecorator.decorate(pn);
        AutoCompleteDecorator.decorate(email);
        viewc.setSelectedItem("View All");
        setPN();
        setEmail();
        view.doClick();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        viewc = new javax.swing.JComboBox<>();
        pn_l = new javax.swing.JLabel();
        email_l = new javax.swing.JLabel();
        view = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        table = new javax.swing.JTable();
        update = new javax.swing.JButton();
        back = new javax.swing.JButton();
        email = new javax.swing.JComboBox<>();
        pn = new javax.swing.JComboBox<>();
        del = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(null);

        viewc.setFont(new java.awt.Font("Malgun Gothic", 0, 18)); // NOI18N
        viewc.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] {"View by email","View by mobile no.","View All" }));
        viewc.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                viewcItemStateChanged(evt);
            }
        });
        getContentPane().add(viewc);
        viewc.setBounds(9, 13, 143, 31);

        pn_l.setFont(new java.awt.Font("Malgun Gothic", 1, 20)); // NOI18N
        pn_l.setText("Phone No.");
        getContentPane().add(pn_l);
        pn_l.setBounds(320, 30, 99, 36);

        email_l.setFont(new java.awt.Font("Malgun Gothic", 1, 20)); // NOI18N
        email_l.setText("Email ID");
        getContentPane().add(email_l);
        email_l.setBounds(310, 30, 110, 36);

        view.setFont(new java.awt.Font("Malgun Gothic", 1, 22)); // NOI18N
        view.setText("View");
        view.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewActionPerformed(evt);
            }
        });
        getContentPane().add(view);
        view.setBounds(870, 20, 83, 39);

        table.setFont(new java.awt.Font("Malgun Gothic", 3, 16)); // NOI18N
        table.setForeground(new java.awt.Color(255, 51, 51));
        table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null}
            },
            new String [] {
                "ID", "Name", "Phone No.", "Email"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        table.setRowHeight(30);
        jScrollPane1.setViewportView(table);

        getContentPane().add(jScrollPane1);
        jScrollPane1.setBounds(0, 77, 970, 276);

        update.setFont(new java.awt.Font("Malgun Gothic", 1, 24)); // NOI18N
        update.setText("Update");
        update.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateActionPerformed(evt);
            }
        });
        getContentPane().add(update);
        update.setBounds(430, 410, 115, 41);

        back.setFont(new java.awt.Font("Malgun Gothic", 1, 24)); // NOI18N
        back.setText("<- Back");
        back.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backActionPerformed(evt);
            }
        });
        getContentPane().add(back);
        back.setBounds(44, 413, 121, 41);

        email.setFont(new java.awt.Font("Malgun Gothic", 0, 18)); // NOI18N
        email.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] {}));
        email.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                emailActionPerformed(evt);
            }
        });
        getContentPane().add(email);
        email.setBounds(400, 30, 270, 31);

        pn.setFont(new java.awt.Font("Malgun Gothic", 0, 18)); // NOI18N
        pn.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] {}));
        getContentPane().add(pn);
        pn.setBounds(430, 30, 210, 30);

        del.setFont(new java.awt.Font("Malgun Gothic", 1, 24)); // NOI18N
        del.setText("Delete");
        del.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                delActionPerformed(evt);
            }
        });
        getContentPane().add(del);
        del.setBounds(810, 410, 110, 40);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void viewcItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_viewcItemStateChanged
        // TODO add your handling code here:
        if(viewc.getSelectedItem().toString().equals("View by mobile no."))
        {
            pn_l.setVisible(true);
            pn.setVisible(true);
            email_l.setVisible(false);
            email.setVisible(false);
        }
        else
        if(viewc.getSelectedItem().toString().equals("View by email"))
        {
            pn_l.setVisible(false);
            pn.setVisible(false);
            email_l.setVisible(true);
            email.setVisible(true);
        }
        else
        {
            pn_l.setVisible(false);
            pn.setVisible(false);
            email_l.setVisible(false);
            email.setVisible(false);
        }
    }//GEN-LAST:event_viewcItemStateChanged

    private void emailActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_emailActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_emailActionPerformed

    private void viewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewActionPerformed
        // TODO add your handling code here:
        String query = setQuery();
        Connection con = getConnection();
        if(con!=null)
        {
            try
            {
                Statement s=con.createStatement();
                ResultSet rs=s.executeQuery(query);
                //String ID = id.getText();
                
               // System.out.println(ID +"1"+PN+"2"+s_type);
                mymodel mm = new mymodel(rs);
                table.setModel(mm);
                //con.close();
            }
            catch(Exception e)
            {
                System.out.println(e);
            }
                
        }
    }//GEN-LAST:event_viewActionPerformed

    private void updateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateActionPerformed
        // TODO add your handling code here:
        try
        {
            TableModel model = (TableModel) table.getModel();
            int row = table.getSelectedRow();

            String ID = model.getValueAt(row, 0).toString();
            
            if(kl==0)
            {
                addCustomer ac = new addCustomer(ID);
                ac.setVisible(true);
                this.dispose();
            }
            else
            {
                addCustomer ac = new addCustomer(ID,kl);
                ac.setVisible(true);
                this.dispose();
            }
            
        }
        catch (Exception e)
        {
            JOptionPane.showMessageDialog(this,"Please select Staff details from Table");
        }
    }//GEN-LAST:event_updateActionPerformed

    private void backActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backActionPerformed
        // TODO add your handling code here:
        if(kl==0)
        {
            customers ct = new customers();
            ct.setVisible(true);
            this.dispose();
        }
        else
        {
            customers ct = new customers(kl);
            ct.setVisible(true);
            this.dispose();
        }
    }//GEN-LAST:event_backActionPerformed

    private void delActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_delActionPerformed
        // TODO add your handling code here:
        try
        {
            TableModel model = (TableModel) table.getModel();
            int row = table.getSelectedRow();

            String cid = model.getValueAt(row, 0).toString();
            int resp = JOptionPane.showConfirmDialog(this, "Do you want to DELETE this CUSTOMER","Confirm", JOptionPane.YES_NO_OPTION, JOptionPane.WARNING_MESSAGE);
            if(resp == JOptionPane.YES_OPTION)
            {
                deleteCustomer(cid);
                view.doClick();
            }

        }
        catch (Exception e)
        {
            JOptionPane.showMessageDialog(this,"Please select Order details from Table");
        }
    }//GEN-LAST:event_delActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(updateCustomer.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(updateCustomer.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(updateCustomer.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(updateCustomer.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new updateCustomer().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton back;
    private javax.swing.JButton del;
    private javax.swing.JComboBox<String> email;
    private javax.swing.JLabel email_l;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JComboBox<String> pn;
    private javax.swing.JLabel pn_l;
    private javax.swing.JTable table;
    private javax.swing.JButton update;
    private javax.swing.JButton view;
    private javax.swing.JComboBox<String> viewc;
    // End of variables declaration//GEN-END:variables

    private void setPN() {
         //To change body of generated methods, choose Tools | Templates.
         Connection con = getConnection();
         try
         {
             Statement s=con.createStatement();
             ResultSet rs=s.executeQuery("select phone_no from customers order by phone_no asc");
             pn.addItem("");
             while(rs.next())
                 pn.addItem(rs.getString(1));
             con.close();
         }
         catch(Exception e)
         {
             System.out.println(e);
         }
    }

    private void setEmail() {
        //To change body of generated methods, choose Tools | Templates.
        Connection con = getConnection();
        try
         {
             Statement s=con.createStatement();
             ResultSet rs=s.executeQuery("select email from customers where email !='' order by email asc");
             email.addItem("");
             while(rs.next())
                 email.addItem(rs.getString(1));
             con.close();
         }
         catch(Exception e)
         {
             System.out.println(e);
         }
    }

    private Connection getConnection() {
        //To change body of generated methods, choose Tools | Templates.
        try
         {
             Class.forName("com.mysql.jdbc.Driver");
             Connection con =(Connection) DriverManager.getConnection("jdbc:mysql://localhost:3306/cafe","root","");
             return con;
         }
         catch(Exception e)
         {
             System.out.println(e);
             Connection con = null;
             return con;
         }
    }

    private String setQuery() {
         //To change body of generated methods, choose Tools | Templates.
         String query = null;
         String PN = pn.getSelectedItem().toString();
         String emails = email.getSelectedItem().toString();
         if(viewc.getSelectedItem().toString().equals("View All"))
             query = "select * from customers order by customerID asc";
         if(viewc.getSelectedItem().toString().equals("View by mobile no."))
             query = "select * from customers where phone_no = '"+PN+"' ";
         if(viewc.getSelectedItem().toString().equals("View by email"))
             query = "select * from customers where email = '"+emails+"' ";
         return query;
    }

    private void deleteCustomer(String cid) {
         //To change body of generated methods, choose Tools | Templates.
         Connection con = getConnection();
         try
         {
             Statement s=con.createStatement();
             s.executeUpdate("delete from customers where customerID = "+cid);
             //s.executeUpdate("delete from orders where orderID = "+cid);
             con.close();
         }
         catch(Exception e)
         {
             JOptionPane.showMessageDialog(this,"Cannot DELETE this CUSTOMER");
             System.out.println(e);
         }
    }
}
